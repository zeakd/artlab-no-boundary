{"version":3,"sources":["color.js"],"names":["console","log","colors","canvas","document","getElementById","ctx","getContext","width","height","drawDot","x","y","color","hexToRgb","r","g","b","imageData","getImageData","data","i","j","putImageData","gaussianKernel","KERNEL_SUM","blur","bluredImageData","createImageData","bluredData","sumR","sumG","sumB","sumA","w","h","kernerIdx","length","a","idx","Math","round","fillStyle","fillRect","setInterval","random","n","floor","hex","result","exec","parseInt","draw","window","requestAnimationFrame"],"mappings":"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","file":"color.f8ce7f6e.map","sourceRoot":"../src","sourcesContent":["console.log('hi')\n\nconst colors = [\n  '#ff3000',\n  '#e2234c',\n  '#fca649',\n  '#fcd532',\n  '#c1ff4a',\n  '#03e574',\n  '#82f975',\n  '#f7883c',\n  '#f95023',\n  '#22cefc',\n  '#06eaea',\n  '#35d2fc',\n  '#b688ff',\n  '#f97dc1',\n  '#fcb1e1',\n  '#efb7f7',\n  '#fcc0d0',\n]\n\nconst canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\ncanvas.width = 400;\ncanvas.height = 400;\n\nfunction drawDot(x, y, color) {\n\n  const { r, g, b } = hexToRgb(color);\n\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  const data = imageData.data;\n  // const color = colors[0];\n  \n  for (let i = x - 40; i < x + 40; i++) {\n    for (let j = y - 40; j < y + 40; j++) {\n      // console.log(data);\n      data[(i + j * canvas.height) * 4 + 0] = r;\n      data[(i + j * canvas.height) * 4 + 1] = g;\n      data[(i + j * canvas.height) * 4 + 2] = b;\n      data[(i + j * canvas.height) * 4 + 3] = 255;\n    }\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\nconst gaussianKernel = [\n  [1,  4,  7,  4,  1],\n  [4, 16, 26, 16,  4],\n  [7, 26, 41, 26,  7],\n  [4, 16, 26, 16,  4],\n  [1,  4,  7,  4,  1],\n]\n\nconst KERNEL_SUM = 273;\n\nfunction blur() {\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  const data = imageData.data;\n\n  const bluredImageData = ctx.createImageData(canvas.width, canvas.height);\n  const bluredData = bluredImageData.data;\n\n  for (let i = 0; i < canvas.width; i++) {\n    for (let j = 0; j < canvas.height; j++) {\n     \n      let sumR = 0;\n      let sumG = 0;\n      let sumB = 0;\n      let sumA = 0;\n\n      for (let w= -2; w < 3; w++) {\n        for (let h = -2; h < 3; h++) {\n          const kernerIdx = ((i + w) + (j + h) * canvas.height) * 4;\n          let r, g, b;\n          if (kernerIdx < 0 || kernerIdx >= data.length) {\n            r = 255;\n            g = 255;\n            b = 255;\n            a = 255;\n          } else {\n            r = data[kernerIdx];\n            g = data[kernerIdx + 1];\n            b = data[kernerIdx + 2];\n            a = data[kernerIdx + 3];\n          }\n\n          sumR += r * gaussianKernel[w + 2][h + 2]\n          sumG += g * gaussianKernel[w + 2][h + 2]\n          sumB += b * gaussianKernel[w + 2][h + 2]\n          sumA += a * gaussianKernel[w + 2][h + 2]\n\n        }\n      }\n\n      const idx = (i + j * canvas.height) * 4;\n\n      bluredData[idx] = Math.round(sumR / KERNEL_SUM);\n      bluredData[idx + 1] = Math.round(sumG / KERNEL_SUM);\n      bluredData[idx + 2] = Math.round(sumB / KERNEL_SUM);\n      // bluredData[idx + 3] = (Math.round(sumA / KERNEL_SUM) - 1) > 0 ? Math.round(sumA / KERNEL_SUM) - 1 : 0;\n      bluredData[idx + 3] = Math.round(sumA / KERNEL_SUM * 0.99);\n      // bluredData[idx] = data[idx];\n      // bluredData[idx + 1] = data[idx + 1];\n      // bluredData[idx + 2] = data[idx + 2];\n    }\n  }\n\n  ctx.putImageData(bluredImageData, 0, 0);\n}\n\nctx.fillStyle = 'white';\nctx.fillRect(0, 0, canvas.width, canvas.height);\n\ndrawDot(100, 100, '#ff0000')\n// setInterval(() => {\n//   blur()\n// }, 30)\n\nsetInterval(() => {\n  const color = colors[random(colors.length)]\n  drawDot(50 + random(200), 50 + random(200), color)\n}, 1000)\n\nfunction random(n) {\n  return Math.floor(Math.random() * n)\n}\n\nfunction hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n  } : null;\n}\n\n\nfunction draw() {\n  blur()\n\n  window.requestAnimationFrame(draw);\n}\n\nwindow.requestAnimationFrame(draw);"]}